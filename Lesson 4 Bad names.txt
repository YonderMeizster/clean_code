1) Избегать похожих имен.

	1. values_sum и sum_values() - sum_of_numbers и sum_values() // Переменная values_sum хранила в себе сумму значений, возвращенную методом sum_values.

	2. db1_connection_string и db2_connection_string - main_db_con_string и backup_db_con_string // Оригинальные имена мало того, что различаются одним символом, так еще и не дают представления, чем отличаются базы данных, строку подключения к которым они хранят.

2) Избегать имен с цифрами, а также имен с символами, которые легко принять за другие символы (1 и l, O и 0, c и с ^_^).

3) Избегать стандартных имен типов, методов, функций.

4) Не вносить в название неиспользуемую информацию.

	3. input_sequence - sequence // Метод получает на вход последовательность, нет никакого смысла в префиксе input.

	4. numbers_list - numbers // Нет смысла в постфиксе list по той причине, что он не несет никакого смысла. Помимо этого, если контейнер для numbers 	поменяется на множество, например, или на кортеж, что более вероятно, название переменной может ввести в заблуждение.

5) Избегать имена со скрытым смыслом. Или со смыслом, известным только небольшой группе людей.

	5. global_secret_storage- passwords_hasehs // Кому- то может показаться, что global_secret это общий ключ, по которому осуществляют шифрование и сервер и клиент, а на самом деле это место храния хэшированных паролей.
	
	6. hp - health_points // О том, что оригинальное hp содержит в себе значение очков здоровья оставалось только догадываться. Почти с такой же 	вероятностью переменная могла содержать в себе значение гипотинузы, с которым бы оперировал игровой движок.

	7. id - identify_doc // id может быть ошибочно воспринят как индекс, на самом деле переменная хранит паспортные данные.

6) Насчет префиксов и постфиксов: штуки, наподобие max, min, average и так далее стоит включать в название переменной в качестве постфикса.

	8. maximum_number - number_max // Приведение к общему стилю использования спецификаторов поможет улучшить качество кодовой базы команды 		разработчиков.

	9. index - slot_id // В оригинале был какой- то индекс, а после рефакторинга стало ясно, что переменная хранит индекс слота (в контексте класса становится ясно, что за слот)

	10. total_number_of_employees - employee_count // Переменная стала короче, а её смысл не потерялся

7) Иногда следует четко демонстрировать, в каком именно виде данные хранятся в переменной.

	11. distance - distance_km // Тут явно демонстрируется то, что кусок кода будет работать (если верить автору этого кода) с дистанцией в километрах, 	не в милях или не в аршинах.

	12. weight- weight_kg // Данную ошибку я допустил в конспекте по уроку 2. Точнее, эта ситуация требует дополнительной проработки. В уроке 2 я описал, что изменив weight_kg на weight можно перенестись на уровень асбракции выше. Если можно так выразиться, размышлять о массе не как о числе килограммов, а как о физической величине. Замечание в следующем: в названии переменной можно перенестись на уровень выше по иерархии абстракций, если от конкретного значения ничего не меняется, например, внутри кода происходит проверка о том, а что, собственно, в перменной находится (с массой это плохо вяжется, как минимум, потому что ожидается, что рассчеты, связанные с массой, производятся по стандартизированным формулам с применением других величин из СИ. Помимо этого сложно проверить, килограммы хранятся в переменной или фунты и так далее).

